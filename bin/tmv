#!/bin/sh

set -eu

# Not running in connect.kak
if [ -z "${KAKOUNE_SESSION:-}" ] || [ -z "${KAKOUNE_CLIENT-}" ]
then
  exec /bin/mv "$@"
fi

# Running in connect.kak
# Separate flags from file args
flags=''
for arg; do
  case $arg in
    --) shift; break ;;
    -*) flags="$flags $arg"; shift ;;
    *)  break ;;
  esac
done

# Get the last arg, the mv target
for target; do :; done

# Remove last arg from $@
# $@ is now just the list of files to copy
i=1; while [ $i -lt $# ]; do
  set -- "$@" "$1"
  shift
  i=$((i+1))
done
shift

# There should be at least one source file.
# If not, run mv with original args to show usage message.
if [ $# -eq 0 ]
then
  # shellcheck disable=SC2086 # expand $flags
  exec /bin/mv $flags -- "$@" "$target"
fi

# If there are multiple sources, and the target is not a directory,
# print usage.
if [ $# -gt 1 ] && [ ! -d "$target" ]
then
  # shellcheck disable=SC2086 # expand $flags
  exec /bin/mv $flags -- "$@" "$target"
fi

# Move files that are open in kak
# (Note: connect.kak provides a `realpath`.)

# Get details of the active buffer, to restore it later
active_bufname=$(get '%val{bufname}')
active_buffile=$(get '%val{buffile}')
active_bufpath=$(realpath "$active_buffile")
targetpath=$(realpath "$target")

# Synchronize the kak buffer, if there is one
# Returns 0 if there was, otherwise 1
sync_kak_buffer() {
  filepath=$(realpath "$1")
  filename="${filepath##*/}"
  shift

  for buf
  do
    buffilename="${buf##*/}"
    if [ "$filename" = "$buffilename" ]
    then # probably the same file (files have same name)
      buffer "$buf" # Make active buffer
      buffile=$(get '%val{buffile}')
      bufpath=$(realpath "$buffile")

      if [ "$bufpath" = "$filepath" ]
      then # Same file
        send "mv $flags '$targetpath'"

        if [ "$bufpath" = "$active_bufpath" ]
        then # The original active buffer was moved
          active_bufname=$(get '%val{bufname}')
          active_buffile=$(get '%val{buffile}')
          active_bufpath=$(realpath "$active_buffile")
        fi

        return 0
      fi
    fi
  done

  return 1 # not found
}

# Look at each file being moved, see if it's open in a kak buffer.
for file; do
  if eval sync_kak_buffer "'$file'" "$(get '%val{buflist}')"
  then
    shift
  fi
done

# Move files that are not open in kak
if [ $# -gt 0 ]
then
  # shellcheck disable=SC2086 # expand $flags
  /bin/mv $flags -- "$@" "$target"
fi

# Make the originally active buffer active again
buffer "$active_bufname"
