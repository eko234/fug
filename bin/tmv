#!/bin/sh

set -eu

# Not running in connect.kak
if [ -z "${KAKOUNE_SESSION:-}" ] || [ -z "${KAKOUNE_CLIENT-}" ]
then
  exec mv "$@"
fi

# Running in connect.kak
# Separate flags from file args
flags=''
for arg; do
  case $arg in
    --) shift; break ;;
    -*) flags="$flags $arg"; shift ;;
    *)  break ;;
  esac
done

# Get the last arg, the mv target
for target; do :; done

# Remove last arg from $@
# $@ is now just the list of files to copy
i=1; while [ $i -lt $# ]; do
  set -- "$@" "$1"
  shift
  i=$((i+1))
done
shift

# There should be at least one source file.
# If not, run mv with original args to show usage message.
if [ "$1" = "" ]
then
  # shellcheck disable=SC2086
  exec mv $flags -- "$@" "$target"
fi

# If there are multiple sources, and the target is not a directory,
# print usage.
if [ $# -gt 1 ] && [ ! -d "$target" ]
then
  # shellcheck disable=SC2086
  exec mv $flags -- "$@" "$target"
fi

# Move files that are open in kak
# (Note: connect.kak provides a `realpath`.)

# Get details of the active buffer, to restore it later
active_bufname=$(get '%val{bufname}')
active_buffile=$(get '%val{buffile}')
active_bufpath=$(realpath "$active_buffile")
targetpath=$(realpath "$target")

# Returns a list of buffers with a matching name
filebuffer() {
  file="${1##*/}"
  buffers="$2"
  for buffer in $buffers
  do
    bufferfile="${buffer##*/}"
    if [ "$file" = "$bufferfile" ]
    then
      printf "%s\n" "$buffer"
    fi
  done
}

# Look at each file being moved, see if it's open in a kak buffer.
for file; do
  # realpath's are used to canonicalize comparisons
  filepath=$(realpath "$file")

  # See if the file is one of the kak buffers
  for b in $(filebuffer "$filepath" "$(buffer)")
  do
    buffer "$b" # Make active buffer
    buffile=$(get '%val{buffile}')
    bufpath=$(realpath "$buffile")

    if [ "$bufpath" = "$filepath" ]
    then # File is open in kak
      send "mv $flags '$targetpath'"

      if [ "$bufpath" = "$active_bufpath" ]
      then # The original active buffer was moved
        active_bufname=$(get '%val{bufname}')
        active_buffile=$(get '%val{buffile}')
        active_bufpath=$(realpath "$active_buffile")
      fi

      shift
      break
    fi
  done
done

# Move files that are not open in kak
if [ $# -gt 0 ]
then
  # shellcheck disable=SC2086
  mv $flags -- "$@" "$target"
fi

# Make the originally active buffer active again
buffer "$active_bufname"
